cmake_minimum_required(VERSION 2.6)
project(MBO)
enable_testing()
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/cmake")
include(AddCCompilerFlagIfSupported)
include(AddCLinkerFlagIfSupported)

option(RUN_EXAMPLES_AS_TESTS 
    "Whether to run the examples as part of the test suite" ON)
option(MBO_ENABLE_COVERAGE
    "Instrument tests for coverage" ON)
option(MBO_BUILD_DOCS
    "Whether to build documentation" OFF)
option(MBO_BUILD_SHARED_LIBS
    "Whether to build shared libraries" OFF)

if(CMAKE_COMPILER_IS_GNUCC)
  set(WARNING_FLAGS "-Wall")
  add_c_compiler_flag_if_supported("-Wpedantic")
  add_c_compiler_flag_if_supported("-fdiagnostics-color=auto")
  if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    add_c_compiler_flag_if_supported("-fsanitize=address")
  endif()
  if(MBO_ENABLE_COVERAGE)
    add_definitions("-ftest-coverage -fprofile-arcs")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 ${CC_FLAGS} ${WARNING_FLAGS}")
elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
  set(WARNING_FLAGS "-Wall -Wpedantic")
  if(MBO_ENABLE_COVERAGE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftest-coverage -fprofile-arcs")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs")
  endif()
  set(CMAKE_C_FLAGS 
      "${CMAKE_C_FLAGS} -std=c99 -fdiagnostics-color=auto ${WARNING_FLAGS}")
  set(CMAKE_C_FLAGS_DEBUG 
      "${CMAKE_C_FLAGS_DEBUG} -fsanitize=address")
elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
endif()

if(MBO_BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS ON)
endif()

add_subdirectory(include)
add_subdirectory(src)
add_subdirectory(tests)
add_subdirectory(examples)

if(MBO_BUILD_DOCS)
  find_package(Doxygen)
  if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/doxyfile @ONLY)
  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/doc")
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxyfile
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/doc"
    COMMENT "Generating API documentation with Doxygen" VERBATIM
  )
  else()
    message(STATUS "Doxygen not found -- not building docs")
  endif()
endif()

